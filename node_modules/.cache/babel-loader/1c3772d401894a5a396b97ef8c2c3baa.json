{"ast":null,"code":"import _regeneratorRuntime from\"/Users/koborihiroshi/develop_now/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/koborihiroshi/develop_now/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import firebase from\"firebase\";import{db}from\"./firebase\";export var addBbs=function addBbs(name,comment){db.collection(\"bbs\").add({name:name,comment:comment,ip:'false',created_at:firebase.firestore.FieldValue.serverTimestamp()});};export var initGet=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var bbs;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return db.collection(\"bbs\").orderBy(\"created_at\",\"asc\");case 2:bbs=_context.sent;return _context.abrupt(\"return\",bbs.get().then(function(snapShot){var bbss=[];snapShot.forEach(function(doc){bbss.push({name:doc.data().name,comment:doc.data().comment,created_at:doc.data().created_at,ip:doc.data().ip});});return bbss;}));case 4:case\"end\":return _context.stop();}}},_callee);}));return function initGet(){return _ref.apply(this,arguments);};}();","map":{"version":3,"sources":["/Users/koborihiroshi/develop_now/frontend/src/service/api.js"],"names":["firebase","db","addBbs","name","comment","collection","add","ip","created_at","firestore","FieldValue","serverTimestamp","initGet","orderBy","bbs","get","then","snapShot","bbss","forEach","doc","push","data"],"mappings":"6TAAA,MAAOA,CAAAA,QAAP,KAAqB,UAArB,CACA,OAASC,EAAT,KAAmB,YAAnB,CAEA,MAAO,IAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,IAAD,CAAOC,OAAP,CAAmB,CACvCH,EAAE,CAACI,UAAH,CAAc,KAAd,EAAqBC,GAArB,CAAyB,CACvBH,IAAI,CAAEA,IADiB,CAEvBC,OAAO,CAAEA,OAFc,CAGvBG,EAAE,CAAE,OAHmB,CAIvBC,UAAU,CAAER,QAAQ,CAACS,SAAT,CAAmBC,UAAnB,CAA8BC,eAA9B,EAJW,CAAzB,EAMD,CAPM,CASP,MAAO,IAAMC,CAAAA,OAAO,0FAAG,iKACHX,CAAAA,EAAE,CAACI,UAAH,CAAc,KAAd,EACjBQ,OADiB,CACT,YADS,CACK,KADL,CADG,QACfC,GADe,+CAIdA,GAAG,CAACC,GAAJ,GAAUC,IAAV,CAAe,SAACC,QAAD,CAAc,CAClC,GAAIC,CAAAA,IAAI,CAAG,EAAX,CACAD,QAAQ,CAACE,OAAT,CAAiB,SAACC,GAAD,CAAS,CACxBF,IAAI,CAACG,IAAL,CAAU,CACRlB,IAAI,CAAEiB,GAAG,CAACE,IAAJ,GAAWnB,IADT,CAERC,OAAO,CAAEgB,GAAG,CAACE,IAAJ,GAAWlB,OAFZ,CAGRI,UAAU,CAAEY,GAAG,CAACE,IAAJ,GAAWd,UAHf,CAIRD,EAAE,CAAEa,GAAG,CAACE,IAAJ,GAAWf,EAJP,CAAV,EAMD,CAPD,EAQA,MAAOW,CAAAA,IAAP,CACD,CAXM,CAJc,wDAAH,kBAAPN,CAAAA,OAAO,0CAAb","sourcesContent":["import firebase from \"firebase\";\nimport { db } from \"./firebase\"\n\nexport const addBbs = (name, comment) => {\n  db.collection(\"bbs\").add({\n    name: name,\n    comment: comment,\n    ip: 'false',\n    created_at: firebase.firestore.FieldValue.serverTimestamp(),\n  })\n}\n\nexport const initGet = async() => {\n  const bbs = await db.collection(\"bbs\")\n  .orderBy(\"created_at\", \"asc\");\n\n  return bbs.get().then((snapShot) => {\n    let bbss = [];\n    snapShot.forEach((doc) => {\n      bbss.push({\n        name: doc.data().name,\n        comment: doc.data().comment,\n        created_at: doc.data().created_at,\n        ip: doc.data().ip,\n      });\n    });\n    return bbss ;\n  });\n}"]},"metadata":{},"sourceType":"module"}